# frozen_string_literal: true

require './Constants/Constants'
require './Constants/Credentials'
require './Managers/ENVGenerator'
require './Managers/TestManager'
require './Managers/OnePasswordManager'
require './Managers/VersioningManager'
require './Managers/BuildManager'
require './Managers/SymbolManager'
require './Managers/DistributionManager'
require './Managers/GithubManager'
require './Managers/CodeSigningManager'

versioning_manager = VersioningManager.new(
  fastlane: self,
  project_path: Constants.PROJECT_PATH,
  main_target_name: Constants.MAIN_TARGET_NAME
)

symbol_manager = SymbolManager.new(
  fastlane: self,
  version: versioning_manager.version_number,
  build_number: versioning_manager.build_number,
  build_path: Constants.BUILD_PATH,
  gsp_directory: Constants.GSP_DIRECTORY,
  binary_path: Constants.BINARY_PATH
)

builder = BuildManager.new(
  fastlane: self,
  scheme_name_staging: Constants.SCHEME_NAME_STAGING,
  scheme_name_production: Constants.SCHEME_NAME_PRODUCTION,
  bundle_identifier_staging: Constants.BUNDLE_ID_STAGING,
  product_name_staging: Constants.PRODUCT_NAME_STAGING,
  product_name_staging_test_flight: Constants.PRODUCT_NAME_STAGING_TEST_FLIGHT,
  product_name_production: Constants.PRODUCT_NAME_PRODUCTION
)

distribution_manager = DistributionManager.new(
  fastlane: self,
  build_path: Constants.BUILD_PATH,
  firebase_token: Credentials.FIREBASE_CLI_TOKEN.value
)

test_manager = TestManager.new(
  fastlane: self
)

env_generator = ENVGenerator.new

github_manager = GithubManager.new(
  fastlane: self,
  repository_owner: Constants.REPOSITORY_OWNER,
  repository_name: Constants.REPOSITORY_NAME
)

code_signing_manager = CodeSigningManager.new(
  fastlane: self,
  keychain_name: "fastlane_tmp_keychain",
  keychain_password: "password",
  bundle_id_sit: Constants.BUNDLE_ID_STAGING,
  bundle_id_uat: Constants.BUNDLE_ID_STAGING,
  bundle_id_production: Constants.BUNDLE_ID_STAGING,
  dev_portal_apple_id: "",
  dev_portal_team_id: Constants.DEV_PORTAL_TEAM_ID
)

before_all do
  ensure_bundle_exec
end

default_platform(:ios)

platform :ios do

  desc "Sync development match signing"
  lane :syncDevelopmentSigning do
    match(type: "development", readonly: true)
  end

  desc "Sync AdHoc match signing"
  lane :syncAdhocSigning do
    match(type: "adhoc", readonly: true)
  end

  # desc "Sync Adhoc match signing on CI"
  # lane :syncAdhocSigningCI do
  # create_keychain(
  #       name: "github_action_keychain",
  #       password: "password",
  #       default_keychain: true,
  #       unlock: true,
  #       timeout: 3600,
  #       lock_when_sleeps: false
  #   )

  #   match(
  #       type: "adhoc",
  #       keychain_name: "github_action_keychain",
  #       keychain_password: "password",
  #       readonly: true
  #   )
  # end

  desc "Sync match signing on CI"
  lane :syncSigningCI do
    code_signing_manager.sync_code_sign(
      update_development: false, 
      update_adhoc: false, 
      update_appstore: false
    )
  # create_keychain(
  #       name: "github_action_keychain",
  #       password: "password",
  #       default_keychain: true,
  #       unlock: true,
  #       timeout: 3600,
  #       lock_when_sleeps: false
  #   )

  #   match(
  #       type: "appstore",
  #       keychain_name: "github_action_keychain",
  #       keychain_password: "password",
  #       readonly: true
  #   )
  end

  desc "Register new devices"
  lane :registerNewDevice do
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(force: true)
  end

  desc "Build and Test"
  lane :test do
    test_manager.test(scheme: Constants.UNIT_TESTS_SCHEME)
  end

  desc "Release"
  lane :release do
   #TODO: add release flow
  end

  # Deploy

  desc 'build develop build'
  lane :build_develop do
    builder.build_develop
  end

  desc 'Build and upload staging app to firebase'
  lane :build_and_upload_staging_app do
    ENV['PRODUCT_NAME'] = Constants.PRODUCT_NAME_STAGING
    ENV['FIREBASE_APP_ID'] = Constants.FIREBASE_APP_ID_STAGING
    ENV['GSP_NAME'] = Constants.GSP_STAGING

    set_app_version
    bump_build
    
    builder.build_app_ad_hoc(Constants.SCHEME_NAME_STAGING, Constants.PRODUCT_NAME_STAGING)

    upload_build_to_firebase
    upload_build_dsym_to_firebase
  end

  desc 'upload develop build to firebase app distribution'
  lane :upload_build_to_firebase do |options|
    release_notes = "#{ENV['PRODUCT_NAME']} #{versioning_manager.version_and_build_number}"
    distribution_manager.upload_to_firebase(
      product_name: ENV['PRODUCT_NAME'],
      firebase_app_id: ENV['FIREBASE_APP_ID'],
      tester_groups: Constants.FIREBASE_TESTER_GROUPS,
      notes: release_notes
    )
  end

  desc 'upload build dsym to firebase'
  lane :upload_build_dsym_to_firebase do |options|
    symbol_manager.upload_built_symbol_to_firebase(
      product_name: ENV['PRODUCT_NAME'],
      gsp_name: ENV['GSP_NAME']
    )
  end

  desc 'set and push release tag'
  lane :release_flag do
    flag = "#{versioning_manager.release_tag}"
    github_manager.add_and_push_tag(
      tag: flag
    )
  end

  #Private helper lanes

  desc 'check if any specific version number in build environment'
  private_lane :set_app_version do
    # Set up env var MANUAL_VERSION if we need to override the version number
    if ENV.fetch('MANUAL_VERSION', '') != ''
      increment_version_number(
        version_number: ENV.fetch('MANUAL_VERSION')
      )
    end
  end

  desc 'set build number with number of commits'
  private_lane :bump_build do
    increment_build_number(
      build_number: number_of_commits,
      xcodeproj: Constants.PROJECT_PATH
    )
  end
end